== f ==
fun f(b: Boolean) {
    val z = true
    val a = 4
    var c = 3
    var x: Int = 0
    if (z || b) {
        x = if (z) a * c
    } else {
        x = if (z!) a * c
    }
    val str1 = "Hello, "
    val str = str1.plus("World!")
}
---------------------
L0:
  1 <START>                                                                                                                                                                     VAL: in: {} out: {}
    v(b: Boolean)                                                                                                                                                               VAL: in: {} out: {}
    magic[FAKE_INITIALIZER](b: Boolean) -> <v0>                                                                                                                                 VAL: in: {} out: {}
    w(b|<v0>)                                                                                                                                                                   VAL: in: {} out: {b=N_C}
  2 mark({ val z = true val a = 4 var c = 3 var x: Int = 0 if (z || b) { x = if (z) a * c } else { x = if (z!) a * c } val str1 = "Hello, " val str = str1.plus("World!") })    VAL: in: {b=N_C} out: {b=N_C}
    v(val z = true)                                                                                                                                                             VAL: in: {b=N_C} out: {b=N_C}
    r(true) -> <v1>                                                                                                                                                             VAL: in: {b=N_C} out: {b=N_C}
    w(z|<v1>)                                                                                                                                                                   VAL: in: {b=N_C} out: {b=N_C, z=C: <true, BOOLEAN>}
    v(val a = 4)                                                                                                                                                                VAL: in: {b=N_C, z=C: <true, BOOLEAN>} out: {b=N_C, z=C: <true, BOOLEAN>}
    r(4) -> <v2>                                                                                                                                                                VAL: in: {b=N_C, z=C: <true, BOOLEAN>} out: {b=N_C, z=C: <true, BOOLEAN>}
    w(a|<v2>)                                                                                                                                                                   VAL: in: {b=N_C, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, z=C: <true, BOOLEAN>}
    v(var c = 3)                                                                                                                                                                VAL: in: {a=C: <4, INT>, b=N_C, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, z=C: <true, BOOLEAN>}
    r(3) -> <v3>                                                                                                                                                                VAL: in: {a=C: <4, INT>, b=N_C, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, z=C: <true, BOOLEAN>}
    w(c|<v3>)                                                                                                                                                                   VAL: in: {a=C: <4, INT>, b=N_C, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, z=C: <true, BOOLEAN>}
    v(var x: Int = 0)                                                                                                                                                           VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, z=C: <true, BOOLEAN>}
    r(0) -> <v4>                                                                                                                                                                VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, z=C: <true, BOOLEAN>}
    w(x|<v4>)                                                                                                                                                                   VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
    mark(if (z || b) { x = if (z) a * c } else { x = if (z!) a * c })                                                                                                           VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
    r(z) -> <v5>                                                                                                                                                                VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
    jt(L2|<v5>)                                                                                                                                                                 VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
    r(b) -> <v6>                                                                                                                                                                VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
L2 [result of boolean operation]:
    magic[OR](z || b|<v5>, <v6>) -> <v7>                                                                                                                                        VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
    jf(L3|<v7>)                                                                                                                                                              VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
  3 mark({ x = if (z) a * c })                                                                                                                                                  VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
    mark(if (z) a * c)                                                                                                                                                          VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
    r(z) -> <v8>                                                                                                                                                                VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
    jf(L4|<v8>)                                                                                                                                                                 VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
    r(a) -> <v9>                                                                                                                                                                VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
    r(c) -> <v10>                                                                                                                                                               VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
    mark(a * c)                                                                                                                                                                 VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
    call(a * c, times|<v9>, <v10>) -> <v11>                                                                                                                                     VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
    jmp(L5)                                                                                                                                                                     VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
L4 [else branch]:
    read (Unit)                                                                                                                                                                 VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
L5 ['if' expression result]:
    merge(if (z) a * c|<v11>) -> <v12>                                                                                                                                          VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
    w(x|<v12>)                                                                                                                                                                  VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=N_C, z=C: <true, BOOLEAN>}
  2 jmp(L6)                                                                                                                                                                      VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=N_C, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=N_C, z=C: <true, BOOLEAN>}
L3 [else branch]:
  3 mark({ x = if (z!) a * c })                                                                                                                                                 VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
    mark(if (z!)                                                                                                                                                                VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
    r(z) -> <v14>                                                                                                                                                               VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
    jf(L7|<v14>)                                                                                                                                                                VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
    jmp(L8)                                                                                                                                                                     VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
L7 [else branch]:
    read (Unit)                                                                                                                                                                 VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
L8 ['if' expression result]:
    merge(if (z!|!<v15>) -> <v16>                                                                                                                                               VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>}
    w(x|<v16>)                                                                                                                                                                  VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=C: <0, INT>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=N_C, z=C: <true, BOOLEAN>}
L6 ['if' expression result]:
  2 merge(if (z || b) { x = if (z) a * c } else { x = if (z!) a * c }|!<v13>, !<v17>) -> <v18>                                                                                  VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=N_C, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=N_C, z=C: <true, BOOLEAN>}
    v(val str1 = "Hello, ")                                                                                                                                                     VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=N_C, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=N_C, z=C: <true, BOOLEAN>}
    mark("Hello, ")                                                                                                                                                             VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=N_C, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=N_C, z=C: <true, BOOLEAN>}
    r("Hello, ") -> <v19>                                                                                                                                                       VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=N_C, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=N_C, z=C: <true, BOOLEAN>}
    w(str1|<v19>)                                                                                                                                                               VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, x=N_C, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, str1=C: <"Hello, ", STRING>, x=N_C, z=C: <true, BOOLEAN>}
    v(val str = str1.plus("World!"))                                                                                                                                            VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, str1=C: <"Hello, ", STRING>, x=N_C, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, str1=C: <"Hello, ", STRING>, x=N_C, z=C: <true, BOOLEAN>}
    mark(str1.plus("World!"))                                                                                                                                                   VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, str1=C: <"Hello, ", STRING>, x=N_C, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, str1=C: <"Hello, ", STRING>, x=N_C, z=C: <true, BOOLEAN>}
    r(str1) -> <v20>                                                                                                                                                            VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, str1=C: <"Hello, ", STRING>, x=N_C, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, str1=C: <"Hello, ", STRING>, x=N_C, z=C: <true, BOOLEAN>}
    mark("World!")                                                                                                                                                              VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, str1=C: <"Hello, ", STRING>, x=N_C, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, str1=C: <"Hello, ", STRING>, x=N_C, z=C: <true, BOOLEAN>}
    r("World!") -> <v21>                                                                                                                                                        VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, str1=C: <"Hello, ", STRING>, x=N_C, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, str1=C: <"Hello, ", STRING>, x=N_C, z=C: <true, BOOLEAN>}
    mark(plus("World!"))                                                                                                                                                        VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, str1=C: <"Hello, ", STRING>, x=N_C, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, str1=C: <"Hello, ", STRING>, x=N_C, z=C: <true, BOOLEAN>}
    call(plus("World!"), plus|<v20>, <v21>) -> <v22>                                                                                                                            VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, str1=C: <"Hello, ", STRING>, x=N_C, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, str1=C: <"Hello, ", STRING>, x=N_C, z=C: <true, BOOLEAN>}
    w(str|<v22>)                                                                                                                                                                VAL: in: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, str1=C: <"Hello, ", STRING>, x=N_C, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, c=C: <3, INT>, str1=C: <"Hello, ", STRING>, str=C: <"Hello, ""World!", STRING>, x=N_C, z=C: <true, BOOLEAN>}
L1:
  1 <END>                                                                                                                                                                       VAL: in: {a=C: <4, INT>, b=N_C, str1=C: <"Hello, ", STRING>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, str1=C: <"Hello, ", STRING>, z=C: <true, BOOLEAN>}
error:
    <ERROR>                                                                                                                                                                     VAL: in: {a=C: <4, INT>, str1=C: <"Hello, ", STRING>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, str1=C: <"Hello, ", STRING>, z=C: <true, BOOLEAN>}
sink:
    <SINK>                                                                                                                                                                      VAL: in: {a=C: <4, INT>, b=N_C, str1=C: <"Hello, ", STRING>, z=C: <true, BOOLEAN>} out: {a=C: <4, INT>, b=N_C, str1=C: <"Hello, ", STRING>, z=C: <true, BOOLEAN>}
=====================
